#include<stdio.h>
#include<stdlib.h>

#define SIZE 10
#define TRUE 1
#define FALSE 0

typedef struct{
	int queue[SIZE];
	int front,rear;
	
}QueueType; //큐를 이용한 bfs


typedef struct{
	
	int n,m;
	int adj_mat[SIZE][SIZE];
	
}GraphType;

void queue_init(QueueType* q){
	q->front = q->rear = 0; 
}

void graph_init(GraphType *g){
	int r,c;
	for(r=0;r<SIZE;r++){
		for(c=0;c<SIZE;c++){
			g->adj_mat[r][c] = 0;
		}
	}
}

int is_empty(QueueType* q){
	return (q->front==q->rear);
}

int is_full(QueueType *q){
	
	return ((q->rear+1)%SIZE==q->front);
}

void enqueue(QueueType* q,int item){
	if(is_full(q)){
		return;
	}
	q->rear = (q->rear+1)%SIZE;
	q->queue[q->rear] = item;
}

int dequeue(QueueType* q){
	if(is_empty(q)){
		return;
	}
	q->front = (q->front+1)%SIZE;
	return q->queue[q->front];
}

void insert_edge(GraphType *g,int start,int end){ //인접행렬방식 
	if((start >= g->n)||(end >= g->n)){
		printf("에러\n");
		return;
	}
	g->adj_mat[start][end] = 1;
	g->adj_mat[end][start] = 1;
}

void print_adj_mat(GraphType* g){//인접행렬만드는 코드 
	printf("\n");
	int r,c;
	for(r=0;r<g->n;r++){
		printf("|");
		for(c=0;c<g->n;c++){
			printf(" %d ",g->adj_mat[r][c]);
		}
		printf("|\n");
	}
}

void bfs_mat(GraphType* g,int visited[], int v){ 
	int w;
	QueueType q;
	queue_init(&q);
	visited[v] = TRUE;
	//전위순회랑 비슷
	printf("정점[%d] ",v+1);
	enqueue(&q,v);
	while(!is_empty(&q)){
		v = dequeue(&q);
		for(w=0;w<g->n;w++){
			if(g->adj_mat[v][w] && !visited[w]){
				visited[w] = TRUE;
				printf("-> 정점[%d]",w+1);
				enqueue(&q,w);
			}
		}
	}
}

void main(){
	GraphType g;
	graph_init(&g);
	int n,m,v;//깊이우선탐색 시작정점번호;
	int start,end;
	scanf("%d %d %d",&g.n,&g.m,&v);
	int i;
	for(i=0;i<g.m/*간선의개수*/;i++){
		scanf("%d %d",&start,&end);
		insert_edge(&g,start-1,end-1);
	}	
	print_adj_mat(&g);
	
	int visited[SIZE] = {FALSE};
	printf("\n 너비  우선 탐색\n");
	bfs_mat(&g,visited,v-1);
	printf("\n"); 
} 
